{
    "CRUD with Image Validation": {
      "prefix": "crudimg",
      "body": [
        "<?php",
        "",
        "namespace App\\Http\\Controllers;",
        "",
        "use Illuminate\\Http\\Request;",
        "use App\\Models\\${1:ModelName};",
        "use Illuminate\\Support\\Facades\\Storage;", 
        "",
        "class ${2:ControllerName} extends Controller",
        "{",
        "    // Menampilkan daftar data",
        "    public function index()",
        "    {",
        "        $data = ${1:ModelName}::all();",
        "        return view('${3:viewName}.index', compact('data'));",
        "    }",
        "",
        "    // Menampilkan form untuk menambahkan data",
        "    public function create()",
        "    {",
        "        return view('${3:viewName}.create');",
        "    }",
        "",
        "    // Menyimpan data baru ke database dengan validasi gambar",
        "    public function store(Request $request)",
        "    {",
        "        $request->validate([",
        "            'field1' => 'required',",
        "            'field2' => 'required',",
        "            'image' => 'required|image|mimes:jpeg,png,jpg,gif,svg|max:2048',",
        "        ]);",
        "",
        "        // Menyimpan gambar",
        "        $imagePath = $request->file('image')->store('images', 'public');",
        "",
        "        // Menyimpan data",
        "        ${1:ModelName}::create([",
        "            'field1' => $request->field1,",
        "            'field2' => $request->field2,",
        "            'image' => $imagePath,",
        "        ]);",
        "        return redirect()->route('${3:viewName}.index')->with('success', 'Data berhasil ditambahkan!');",
        "    }",
        "",
        "    // Menampilkan form untuk mengedit data",
        "    public function edit($id)",
        "    {",
        "        $data = ${1:ModelName}::findOrFail($id);",
        "        return view('${3:viewName}.edit', compact('data'));",
        "    }",
        "",
        "    // Memperbarui data di database",
        "    public function update(Request $request, $id)",
        "    {",
        "        $request->validate([",
        "            'field1' => 'required',",
        "            'field2' => 'required',",
        "            'image' => 'image|mimes:jpeg,png,jpg,gif,svg|max:2048',", // Validasi gambar opsional pada update
        "        ]);",
        "",
        "        $data = ${1:ModelName}::findOrFail($id);",
        "",
        "        // Cek apakah ada gambar baru yang diupload",
        "        if ($request->hasFile('image')) {",
        "            // Hapus gambar lama jika ada",
        "            Storage::delete('public/' . $data->image);",
        "            // Simpan gambar baru",
        "            $imagePath = $request->file('image')->store('images', 'public');",
        "            $data->image = $imagePath;",
        "        }",
        "",
        "        // Update data lainnya",
        "        $data->update([",
        "            'field1' => $request->field1,",
        "            'field2' => $request->field2,",
        "        ]);",
        "        return redirect()->route('${3:viewName}.index')->with('success', 'Data berhasil diperbarui!');",
        "    }",
        "",
        "    // Menghapus data dan gambar dari database",
        "    public function destroy($id)",
        "    {",
        "        $data = ${1:ModelName}::findOrFail($id);",
        "        // Hapus gambar jika ada",
        "        Storage::delete('public/' . $data->image);",
        "        // Hapus data",
        "        $data->delete();",
        "        return redirect()->route('${3:viewName}.index')->with('success', 'Data berhasil dihapus!');",
        "    }",
        "}"
      ],
      "description": "Basic CRUD with image validation and delete functionality"
    },
  "Resource Route": {
    "prefix": "ResourceRoute",
    "body": [
      "use Illuminate\\Support\\Facades\\Route;",
      "",
      "// Standard resource routes",
      "Route::resource('/${1:ResourceName}', '${2:ResourceName}Controller');"
    ],
    "description": "Simpel Resource Route"
  },
  "Split CRUD Routes": {
    "prefix": "SplitCRUD",
    "body": [
      "use Illuminate\\Support\\Facades\\Route;",
      "",
      "// Split CRUD methods for resource controller",
      "Route::get('/${1:ResourceName}', '${2:ResourceName}Controller@index')->name('${1}.index');",
      "Route::get('/${1:ResourceName}/create', '${2:ResourceName}Controller@create')->name('${1}.create');",
      "Route::post('/${1:ResourceName}', '${2:ResourceName}Controller@store')->name('${1}.store');",
      "Route::get('/${1:ResourceName}/{id}', '${2:ResourceName}Controller@show')->name('${1}.show');",
      "Route::get('/${1:ResourceName}/{id}/edit', '${2:ResourceName}Controller@edit')->name('${1}.edit');",
      "Route::put('/${1:ResourceName}/{id}', '${2:ResourceName}Controller@update')->name('${1}.update');",
      "Route::delete('/${1:ResourceName}/{id}', '${2:ResourceName}Controller@destroy')->name('${1}.destroy');"
    ],
    "description": "Split CRUD Routes"
  },
  "Middleware Route": {
    "prefix": "MiddlewareRoute",
    "body": [
      "use Illuminate\\Support\\Facades\\Route;",
      "",
      "// Admin routes with auth, verified, and admin role middleware",
      "Route::middleware(['auth', 'verified', 'role:admin'])->group(function () {",
      "    Route::get('/admin/dashboard', '${2:AdminController}@dashboard')->name('admin.dashboard');",
      "    Route::resource('/admin/${1:ResourceName}', '${2:ResourceName}Controller');",
      "});"
    ],
    "description": "Simpel Middleware Route"
  },
  "Basic Route": {
    "prefix": "route",
    "body": [
      "use Illuminate\\Support\\Facades\\Route;",
      "",
      "// Basic route definition",
      "Route::get('/${1:uri}', '${2:ControllerName}@${3:methodName}')->name('${1}.index');"
    ],
    "description": "Basic route definition in Laravel"
  },
  "Basic Query": {
    "prefix": "query",
    "body": [
      "// Mengambil semua data",
      "${1:ModelName}::all();",
      "",
      "// Mengambil data dengan kondisi",
      "${1:ModelName}::where('${2:field}', '${3:value}')->get();",
      "",
      "// Mengambil data pertama yang cocok",
      "${1:ModelName}::where('${2:field}', '${3:value}')->first();",
      "",
      "// Menghitung jumlah data",
      "${1:ModelName}::count();",
      "",
      "// Menghapus data",
      "${1:ModelName}::destroy(${4:id});"
    ],
    "description": "Basic queries for Laravel models"
  }
}
